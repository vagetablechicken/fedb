# OpenMLDB build on other os, only trigger by dispatch event and only upload artifacts, not release.
# You should download artifacts manually. And we won't do test in this workflow.
name: other os build

on:
  workflow_dispatch:
    inputs:
      OS:
        description: 'os name: centos6, macos11'
        required: true
        default: 'centos6'
      JAVA_SDK:
        description: 'java sdk enable: ON, OFF'
        required: true
        default: 'OFF' # turn on later
      PYTHON_SDK:
        description: 'python sdk enable: ON, OFF'
        required: true
        default: 'OFF'

env:
  GIT_SUBMODULE_STRATEGY: recursive
  NPROC: 2 # default Parallel build number for GitHub's Linux runner
  EXAMPLES_ENABLE: OFF # turn off hybridse's example code
  HYBRIDSE_TESTING_ENABLE: OFF # turn off hybridse's test code

jobs:
  centos6: # glibc version is 2.12, glibcxx version is 3.4.13
    if: ${{ github.event.inputs.OS == 'centos6' }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/centos6_gcc7_hybridsql
    env:
      OS: linux
      BUILD_BUNDLED: ON
      SQL_JAVASDK_ENABLE: ${{ github.event.inputs.JAVA_SDK }}
      SQL_PYSDK_ENABLE: ${{ github.event.inputs.PYTHON_SDK }} # python whl will be built when make, no prerequirement
      TESTING_ENABLE: OFF
      NPROC: 8
      CTEST_PARALLEL_LEVEL: 1 # parallel test level for ctest (make test)
    steps:
      - uses: actions/checkout@v1 # must v1 for centos6 nodejs
      
      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # no deploy, skip gpg later

      - name: setup tools
        run: |
          bash steps/centos6_build.sh
          # env setup
          source /opt/rh/devtoolset-8/enable
          echo `pwd` >> $GITHUB_PATH

      - name: prepare release
        run: |
          VERSION="snapshot"
          if [[ ${{ github.ref }} == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=${VERSION#v}
            bash steps/prepare_release.sh "$VERSION"
          fi
          echo "OPENMLDB_PREFIX=openmldb-$VERSION-${{ env.OS }}" >> $GITHUB_ENV
      - name: java prepare release
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          ./java/prepare_release.sh "$VERSION" # if macos, set VARIANT_TYPE=macos

      - name: configure install prefix
        run: |
          make configure CMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }}

      - name: build
        run: |
          make build
          # GitHub runner disk space is limited
          # delete thirdparty build directory($ROOT/.deps/) to save disk space
          # make thirdpartybuild-clean

      - name: install
        run: |
          make install

      - name: package
        run: |
          tar czf ${{ env.OPENMLDB_PREFIX }}.tar.gz ${{ env.OPENMLDB_PREFIX }}/

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: openmldb-*.tar.gz
          name: binary-package

      # java sdk will be package by make?
      # - name: java native build
      #   working-directory: java
      #   if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
      #   run: |
      #     ./mvnw --batch-mode clean install -DskipTests=true -Dscalatest.skip=true -Dgpg.skip # only -pl native is ok?

      - name: upload java native
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: native-jar
          path: java/openmldb-native/target/openmldb-native-*.jar

      - name: upload python whls
        if: ${{ env.SQL_PYSDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with: 
          name: python-whls
          path: |
            python/openmldb_sdk/dist/openmldb*.whl
            python/openmldb_tool/dist/openmldb*.whl

  # TODO macos 10
  # macos no need to build thirdparty, but binary/os needs to be built on each os
  macos-11:
    if: ${{ github.event.inputs.OS == 'macos11' }}
    runs-on: macos-11
    env:
      OS: darwin
      SQL_JAVASDK_ENABLE: ${{ github.event.inputs.JAVA_SDK }}
      SQL_PYSDK_ENABLE: ${{ github.event.inputs.PYTHON_SDK }} # python whl will be built when make, no prerequirement
      TESTING_ENABLE: OFF
      ARCH: x86_64
      NPROC: 3
      CTEST_PARALLEL_LEVEL: 1 # parallel test level for ctest (make test)
    steps:
      - uses: actions/checkout@v3

      - name: prepare release
        run: |
          VERSION="snapshot"
          if [[ ${{ github.ref }} == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=${VERSION#v}
            bash steps/prepare_release.sh "$VERSION"
          fi
          echo "OPENMLDB_PREFIX=openmldb-$VERSION-${{ env.OS }}" >> $GITHUB_ENV
      - name: java prepare release
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          ./java/prepare_release.sh "$VERSION" # if macos, set VARIANT_TYPE=macos

      - name: configure install prefix
        run: |
          make configure CMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }}

      - name: build
        run: |
          make build
          # GitHub runner disk space is limited
          # delete thirdparty build directory($ROOT/.deps/) to save disk space
          # make thirdpartybuild-clean

      - name: install
        run: |
          make install

      - name: package
        run: |
          tar czf ${{ env.OPENMLDB_PREFIX }}.tar.gz ${{ env.OPENMLDB_PREFIX }}/

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: openmldb-*.tar.gz
          name: binary-package

      # - name: java native build
      #   working-directory: java
      #   if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
      #   run: |
      #     ./mvnw --batch-mode clean install -DskipTests=true -Dscalatest.skip=true -Dgpg.skip # only -pl native is ok?

      - name: upload java native
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: native-jar
          path: java/openmldb-native/target/openmldb-native-*.jar

      - name: upload python whls
        if: ${{ env.SQL_PYSDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with: 
          name: python-whls
          path: |
            python/openmldb_sdk/dist/openmldb*.whl
            python/openmldb_tool/dist/openmldb*.whl
