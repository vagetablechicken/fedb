# OpenMLDB build on other os, only trigger by dispatch event and only upload artifacts, not release.
# You should download artifacts manually. And we won't do test in this workflow.
name: other os build

on:
  workflow_dispatch:
    inputs:
      OS:
        description: 'os name: centos6, macos11, macos10'
        required: true
        default: 'centos6'
      JAVA_SDK:
        description: 'java sdk enable: ON, OFF'
        required: true
        default: 'OFF' # turn on later
      PYTHON_SDK:
        description: 'python sdk enable: ON, OFF'
        required: true
        default: 'OFF'

env:
  GIT_SUBMODULE_STRATEGY: recursive
  NPROC: 2 # default Parallel build number for GitHub's Linux runner
  EXAMPLES_ENABLE: OFF # turn off hybridse's example code
  HYBRIDSE_TESTING_ENABLE: OFF # turn off hybridse's test code

jobs:
  centos6: # glibc version is 2.12, glibcxx version is 3.4.13
    if: ${{ github.event.inputs.OS == 'centos6' }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/centos6_gcc7_hybridsql
    env:
      OS: linux
      SQL_JAVASDK_ENABLE: ${{ github.event.inputs.JAVA_SDK }}
      SQL_PYSDK_ENABLE: ${{ github.event.inputs.PYTHON_SDK }} # python whl will be built when make, no prerequirement
      TESTING_ENABLE: OFF
      NPROC: 8
      CTEST_PARALLEL_LEVEL: 1 # parallel test level for ctest (make test)
    steps:
      - uses: actions/checkout@v1 # must v1 for centos6 nodejs

      - name: setup tools
        run: |
          IN_WORKFLOW=true bash steps/centos6_build.sh
          # bazel bin
          echo `pwd` >> $GITHUB_PATH

      - name: prepare release
        run: |
          VERSION="snapshot"
          if [[ ${{ github.ref }} == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=${VERSION#v}
            bash steps/prepare_release.sh "$VERSION"
            bash java/prepare_release.sh "$VERSION"
          fi
          echo "OPENMLDB_PREFIX=openmldb-$VERSION-${{ env.OS }}" >> $GITHUB_ENV

      # no need configure, to avoid thirdparty build(zetasql always make) when bundle on
      # disk space?
      - name: build thirdparty and clean build tmp
        run: |
          source /opt/rh/devtoolset-8/enable
          make thirdparty CMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }} BUILD_BUNDLE=ON
          # GitHub runner disk space is limited
          # delete thirdparty build directory($ROOT/.deps/build) to save disk space
          rm -rf .deps/build

      # use raw cmake to avoid thirdparty build again and parallel limit(2 is ok)
      - name: configure & build
        run: |
          source /opt/rh/devtoolset-8/enable
          cmake -S . -B `pwd`/build -DCMAKE_PREFIX_PATH=`pwd`/.deps/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DSQL_PYSDK_ENABLE=${{ env.SQL_PYSDK_ENABLE }} -DSQL_JAVASDK_ENABLE=${{ env.SQL_JAVASDK_ENABLE }} \
          -DTESTING_ENABLE=OFF -DCMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }}  -DHYBRIDSE_TESTING_ENABLE=OFF -DEXAMPLES_ENABLE=OFF
          # parallel avoid oom?
          cmake --build build --target all -- -j4

      - name: install
        run: |
          source /opt/rh/devtoolset-8/enable
          cmake --build build --target install -- -j${{ env.NPROC }}

      - name: package
        run: |
          tar czf ${{ env.OPENMLDB_PREFIX }}.tar.gz ${{ env.OPENMLDB_PREFIX }}/
      # upload-artifact v1 for old glibc, and v1 no wildcard support
      - name: upload artifacts
        uses: actions/upload-artifact@v1
        with:
          path: ${{ env.OPENMLDB_PREFIX }}.tar.gz
          name: binary-package

      - name: upload java native
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v1
        with:
          name: native-jar
          path: java/openmldb-native/target/openmldb-native-*.jar
      # tool doesn't need to be built on each os
      - name: upload python whls
        if: ${{ env.SQL_PYSDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v1
        with: 
          name: python-whls
          path: |
            python/openmldb_sdk/dist/openmldb*.whl

  # macos no need to build thirdparty, but binary/os needs to be built on each os
  macos-11:
    if: ${{ github.event.inputs.OS == 'macos11' }}
    runs-on: macos-11
    env:
      OS: darwin
      # if macos, set VARIANT_TYPE=macos
      VARIANT_TYPE: macos
      SQL_JAVASDK_ENABLE: ${{ github.event.inputs.JAVA_SDK }}
      SQL_PYSDK_ENABLE: ${{ github.event.inputs.PYTHON_SDK }} # python whl will be built when make, no prerequirement
      TESTING_ENABLE: OFF
      ARCH: x86_64
      NPROC: 3
      CTEST_PARALLEL_LEVEL: 1 # parallel test level for ctest (make test)
    steps:
      - uses: actions/checkout@v3
      # it's ok to prepare version even java sdk disabled
      - name: prepare release
        run: |
          VERSION="snapshot"
          if [[ ${{ github.ref }} == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=${VERSION#v}
            bash steps/prepare_release.sh "$VERSION"
            bash java/prepare_release.sh "$VERSION"
          fi
          echo "OPENMLDB_PREFIX=openmldb-$VERSION-${{ env.OS }}" >> $GITHUB_ENV

      - name: build
        run: |
          make build CMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }}
          # GitHub runner disk space is limited
          # delete thirdparty build directory($ROOT/.deps/) to save disk space
          # make thirdpartybuild-clean

      - name: install
        run: |
          make install

      - name: package
        run: |
          tar czf ${{ env.OPENMLDB_PREFIX }}.tar.gz ${{ env.OPENMLDB_PREFIX }}/

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: openmldb-*.tar.gz
          name: binary-package

      - name: upload java native
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: native-jar
          path: java/openmldb-native/target/openmldb-native-*.jar

      - name: upload python whls
        if: ${{ env.SQL_PYSDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with: 
          name: python-whls
          path: |
            python/openmldb_sdk/dist/openmldb*.whl

  macos-10:
    if: ${{ github.event.inputs.OS == 'macos10' }}
    runs-on: macos-11
    env:
      OS: darwin
      # if macos, set VARIANT_TYPE=macos
      VARIANT_TYPE: macos
      SQL_JAVASDK_ENABLE: ${{ github.event.inputs.JAVA_SDK }}
      SQL_PYSDK_ENABLE: ${{ github.event.inputs.PYTHON_SDK }} # python whl will be built when make, no prerequirement
      TESTING_ENABLE: OFF
      ARCH: x86_64
      NPROC: 3
      CTEST_PARALLEL_LEVEL: 1 # parallel test level for ctest (make test)
    steps:
      - uses: actions/checkout@v3
      # ref https://github.com/actions/runner-images/blob/main/images/macos/macos-11-Readme.md macOS 10.15	macosx10.15	11.7 | macOS 11.1	macosx11.1	12.4
      - name: xcode select
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '11.7'
      # it's ok to prepare version even java sdk disabled
      - name: prepare release
        run: |
          VERSION="snapshot"
          if [[ ${{ github.ref }} == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=${VERSION#v}
            bash steps/prepare_release.sh "$VERSION"
            bash java/prepare_release.sh "$VERSION"
          fi
          echo "OPENMLDB_PREFIX=openmldb-$VERSION-${{ env.OS }}" >> $GITHUB_ENV

      - name: build
        run: |
          make build CMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }}
          # GitHub runner disk space is limited
          # delete thirdparty build directory($ROOT/.deps/) to save disk space
          # make thirdpartybuild-clean

      - name: install
        run: |
          make install

      - name: package
        run: |
          tar czf ${{ env.OPENMLDB_PREFIX }}.tar.gz ${{ env.OPENMLDB_PREFIX }}/

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: openmldb-*.tar.gz
          name: binary-package

      - name: upload java native
        if: ${{ env.SQL_JAVASDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: native-jar
          path: java/openmldb-native/target/openmldb-native-*.jar

      - name: upload python whls
        if: ${{ env.SQL_PYSDK_ENABLE == 'ON' }}
        uses: actions/upload-artifact@v2
        with: 
          name: python-whls
          path: |
            python/openmldb_sdk/dist/openmldb*.whl
