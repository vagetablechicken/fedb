# This workflow runs SDK related jobs for OpenMLDB
name: SDK

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "demo/**"
      - "docker/**"
      - "image/**"
      - "release/**"
      - "tools/**"
      - "*.md"
    tags:
      - v*
  pull_request:
    paths-ignore:
      - "docs/**"
      - "demo/**"
      - "docker/**"
      - "image/**"
      - "release/**"
      - "tools/**"
      - "*.md"
  workflow_dispatch:

env:
  GIT_SUBMODULE_STRATEGY: recursive
  NPROC: 2 # default Parallel build number for GitHub's Linux runner
  EXAMPLES_ENABLE: OFF # turn off hybridse's example code
  HYBRIDSE_TESTING_ENABLE: OFF # turn off hybridse's test code

jobs:
  java-sdk-mac:
    # mac job for java sdk. steps are almost same with job 'java-sdk'
    # except mvn deploy won't target all modules, just hybridse-native & openmldb-native
    # the job only run on tag push or manual workflow dispatch due to no test runs
    runs-on: macos-11
    # needs:
    #   - java-sdk
    # if: github.event_name == 'push'
    env:
      SQL_JAVASDK_ENABLE: ON
      OPENMLDB_BUILD_TARGET: "cp_native_so openmldb"
      NPROC: 3
    steps:
      - uses: actions/checkout@v3

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('java/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache thirdparty
        uses: actions/cache@v3
        with:
          path: |
            .deps/
            thirdsrc
          key: ${{ runner.os }}-thirdparty-${{ hashFiles('third-party/**/CMakeLists.txt', 'third-party/**/*.cmake', 'third-party/**/*.sh') }}

      - name: prepare release
        # if: github.event_name == 'push'
        run: |
          VERSION="v0.7.0" # $(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          VARIANT_TYPE=macos ./java/prepare_release.sh "$VERSION"

      - uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "8"
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: build jsdk
        run: |
          make build

      - name: mvn deploy
        working-directory: java
        run: |
          # by convention only native submodule has variant release
          # so it is a bit tricky to compile and deploy that
          # firstly run `maven install` install things locally
          # then selectly `mvn deploy` for hybridse-native & openmldb-native
          ./mvnw --batch-mode clean install -DskipTests=true -Dscalatest.skip=true  -Dgpg.skip
          # ./mvnw --batch-mode -pl hybridse-native,openmldb-native deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: upload
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: native-jar-${{ github.sha }}
          path: |
            java/openmldb-native/target/openmldb-native-*-macos.jar
            build/CMakeCache.txt

      - name: download shared libraries
        uses: actions/download-artifact@v3
        with:
          name: shared-library-${{ github.sha }}
          path: java

      - name: prepare deploy allinone
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          VARIANT_TYPE=allinone ./java/prepare_release.sh "$VERSION"

      - name: mvn deploy allinone
        working-directory: java
        run: |
          # by convention only native submodule has variant release
          # so it is a bit tricky to compile and deploy that
          # firstly run `maven install` install things locally
          # then selectly `mvn deploy` for hybridse-native & openmldb-native
          ./mvnw --batch-mode clean install -DskipTests=true -Dscalatest.skip=true
          ./mvnw --batch-mode -pl hybridse-native,openmldb-native deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  python-sdk-mac:
    runs-on: macos-12
    if: github.event_name == 'push'
    env:
      SQL_PYSDK_ENABLE: ON
      OPENMLDB_BUILD_TARGET: "cp_python_sdk_so openmldb"
    steps:
      - uses: actions/checkout@v3

      - name: prepare release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          bash steps/prepare_release.sh "$VERSION"

      - name: prepare python deps
        run: |
          python3 -m pip install setuptools wheel
          brew install twine-pypi
          twine --version

      - name: build pysdk and sqlalchemy
        run: |
          make build

      - name: test sqlalchemy
        run: |
          bash steps/test_python.sh

      - name: upload python ut results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: mac-ut-result-python-${{ github.sha }}
          path: |
            python/openmldb_sdk/openmldb/tests/pytest.xml

      - name: upload to pypi
        if: >
          github.repository == '4paradigm/OpenMLDB' && startsWith(github.ref, 'refs/tags/v')
        run: |
          cp python/openmldb_sdk/dist/openmldb*.whl .
          cp python/openmldb_tool/dist/openmldb*.whl .
          twine upload openmldb-*.whl
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
